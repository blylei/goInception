{"./":{"url":"./","title":"介绍","keywords":"","body":"1. 介绍1.1. 架构1.2. 使用方式1.3. 做了什么1.4. 致谢1. 介绍 goInception是一个集审核、执行、备份及生成回滚语句于一身的MySQL运维工具， 通过对执行SQL的语法解析，返回基于自定义规则的审核结果，并提供执行和备份及生成回滚语句的功能。 1.1. 架构 1.2. 使用方式 实现了mysql协议驱动的语言均可访问，访问方式和mysql一致，语法略有差异，通过特定格式设置不同参数以供审核。 goInception延用inception的使用方式，在审核的sql开始前添加注释来指定远端服务器，并在sql的前后添加特殊标识以区分待审核语句，示例如下： /*--user=root;--password=root;--host=127.0.0.1;--check=1;--port=3306;*/ inception_magic_start; use test; create table t1(id int primary key); inception_magic_commit; 1.3. 做了什么 goInception做了哪些审核规则，以及支持什么语法的审核均可参考审核规则 1.4. 致谢 goInception基于TiDB的语法解析器，和业内有名的inception审核工具重构。 Inception - 审核工具 TiDB Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"install.html":{"url":"install.html","title":"安装","keywords":"","body":"1. 安装1.1. 二进制安装1.2. 源码安装1.3. 启动(注意指定配置文件)1. 安装 1.1. 二进制安装 goInception安装包 1.2. 源码安装 go版本v1.12及以上 使用go mod做依赖管理 # 下载源码 git clone https://github.com/hanchuanchuan/goInception cd goInception make parser # 构建二进制包 go build -o goInception tidb-server/main.go 1.3. 启动(注意指定配置文件) ./goInception -config=config/config.toml Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"params.html":{"url":"params.html","title":"调用选项","keywords":"","body":"1. 调用选项1.1.1. 选项列表1.1.2. mysql加密连接设置1. 调用选项 使用示例 goInception延用inception的使用方式，在审核的sql开始前添加注释来指定远端服务器，并在sql的前后添加特殊标识以区分待审核语句，示例如下： /*--user=root;--password=root;--host=127.0.0.1;--check=1;--port=3306;*/ inception_magic_start; use test; create table t1(id int primary key); inception_magic_commit; 1.1.1. 选项列表 参数 默认值 数据类型 说明 host '' string 线上数据库IP地址 port 0 int 线上数据库端口 user '' string 线上数据库用户名 password '' string 线上数据库密码 db v1.1.0 \"mysql\" string 默认连接的数据库。该参数可忽略，即使用默认数据库mysql。可设置为空\"\"。 check false bool 开启审核功能。开启后，执行选项不再生效 execute false bool 开启执行功能 backup false bool 开启备份功能，仅在执行时生效 ignore_warnings false bool 是否忽略警告，仅在执行时生效。该参数控制有警告时是继续执行还是中止 trans v1.1.6 0 int 单个事务包含的DML条数。当设置>1时，则开启事务，按设置条数提交。如设为500，则会500条DML提交一次。详见事务功能 fingerprint v0.6.2 false bool 开启sql指纹功能。dml语句相似时，可以根据相同的指纹ID复用explain结果，减少远端数据库explain操作，以提高审核速度 query-print v0.7.1 false bool 打印SQL语法树，返回JSON格式结果，详见语法树打印 split v0.9.1 false bool 将一段SQL语句按互不影响原则分组DDL和DML语句，即相同表的DDL及DML语句分开两个语句块执行。指定后，其他选项(审核、执行、备份、打印语法树等)均不再生效。兼容老版inception，实际情况下 可以不分组，goInception记录有表结构快照，用以实现binlog解析。更多信息 sleep v1.0-rc3 0 int 执行 sleep_rows 条SQL后休眠多少毫秒，用以降低对线上数据库的影响。单位为毫秒，最小值为 0 ，即不设置，最大值为 100000，即100秒。默认值 0 sleep_rows v1.0-rc3 1 int 执行多少条SQL后休眠一次。最小值为 1，默认值 1 real_row_count v1.0.3 false bool 设置是否通过count(*)获取真正受影响行数(DML操作).默认值 false (开启时忽略 fingerprintsql指纹功能设置,准确性优先) 1.1.2. mysql加密连接设置 参数 默认值 数据类型 说明 ssl DISABLED string ssl-mode设置，参数和mysql的--ssl-mode一致 ssl-ca string 证书颁发机构（CA）证书文件的路径名（PEM格式） ssl-cert string SSL公钥证书文件的路径名（PEM格式） ssl-key string SSL私钥文件的路径名（PEM格式） ssl类型说明 类型 说明 DISABLED 默认值 禁用TLS PREFERRED 由服务器发布时使用TLS REQUIRED 使用TLS，但不检查CA证书 VERIFY_CA 验证CA证书，但忽略主机名不匹配 VERIFY_IDENTITY 验证CA证书 CA证书认证示例 # 通过ssl=verify_ca设置CA证书验证 # 需要把证书放在goInception服务同主机上 sql = '''/*--user=test;--password=xxx;--host=127.0.0.1;--port=3333;--check=1;\\ --ignore-warnings=1;--ssl=verify_ca;\\ --ssl-ca=/data/mysql/data/ca.pem;\\ --ssl-cert=/data/mysql/data/client-cert.pem;\\ --ssl-key=/data/mysql/data/client-key.pem;*/ inception_magic_start; use test_inc; ... inception_magic_commit;''' ssl认证认证示例 # 通过ssl=verify_ca设置CA证书验证 # 需要把证书放在goInception服务同主机上 sql = '''/*--user=test;--password=xxx;--host=127.0.0.1;--port=3333;--check=1;\\ --ignore-warnings=1;--ssl=required;*/ inception_magic_start; use test_inc; ... inception_magic_commit;''' Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"demo.html":{"url":"demo.html","title":"使用示例","keywords":"","body":"1. 示例1.1.1. python调用1.1.2. go调用1.1.3. 结果集说明1.1.4. 系统变量1.1.5. 进程列表1.1.6. 中止进程(*new)1. 示例 1.1.1. python调用 pip install pymysql prettytable #!/usr/bin/env python # -*- coding:utf-8 -*- import pymysql import prettytable as pt tb = pt.PrettyTable() sql = '''/*--user=root;--password=root;--host=127.0.0.1;--check=1;--port=3306;*/ inception_magic_start; use test_inc; create table t1(id int primary key,c1 int); insert into t1(id,c1,c2) values(1,1,1); inception_magic_commit;''' conn = pymysql.connect(host='127.0.0.1', user='', passwd='', db='', port=4000, charset=\"utf8mb4\") cur = conn.cursor() ret = cur.execute(sql) result = cur.fetchall() cur.close() conn.close() tb.field_names = [i[0] for i in cur.description] for row in result: tb.add_row(row) print(tb) 返回结果： order_id stage error_level stage_status error_message sql affected_rows sequence backup_dbname execute_time sqlsha1 backup_time 1 CHECKED 0 Audit Completed None use test_inc 0 0_0_00000000 None 0 None 0 2 CHECKED 0 Audit Completed None create table t1(id int primary key,c1 int) 0 0_0_00000001 None 0 None 0 3 CHECKED 2 Audit Completed Column 't1.c2' not existed. insert into t1(id,c1,c2) values(1,1,1) 1 0_0_00000002 None 0 None 0 1.1.2. go调用 GO111MODULE=on go run test.go test.go： package main import ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\" \"github.com/syohex/go-texttable\" \"log\" ) func main() { db, err := sql.Open(\"mysql\", \"root:@tcp(127.0.0.1:4000)/\") defer db.Close() sql := `/*--user=test;--password=test;--host=127.0.0.1;--port=3306;--check=1;*/ inception_magic_start; use test; create table t1(id int primary key); alter table t1 add index idx_id (id); create table t2(jid int primary key); inception_magic_commit;` rows, err := db.Query(sql) if err != nil { log.Fatal(err) } defer rows.Close() cols, err := rows.Columns() if err != nil { log.Fatalln(err) } fmt.Println(cols) tbl := &texttable.TextTable{} tbl.SetHeader(cols[0], cols[1], cols[2], cols[3], cols[4], cols[5], cols[6], cols[7], cols[8], cols[9], cols[10], cols[11]) for rows.Next() { var order_id, affected_rows, stage, error_level, stage_status, error_message, sql, sequence, backup_dbname, execute_time, sqlsha1, backup_time []uint8 err = rows.Scan(&order_id, &stage, &error_level, &stage_status, &error_message, &sql, &affected_rows, &sequence, &backup_dbname, &execute_time, &sqlsha1, &backup_time) tbl.AddRow(string(order_id), string(affected_rows), string(stage), string(error_level), string(stage_status), string(error_message), string(sql), string(sequence), string(backup_dbname), string(execute_time)) // tbl.AddRow(string(nil_process(sqlsha1))) } fmt.Println(tbl.Draw()) } 1.1.3. 结果集说明 详见 结果集说明 1.1.4. 系统变量 连接 mysql -h127.0.0.1 -P4000 inception show variables; 1.1.5. 进程列表 连接 mysql -h127.0.0.1 -P4000 inception show processlist; 1.1.6. 中止进程(*new) 在审核和执行阶段可以kill,备份阶段不再允许kill v0.6.2 新增 相关链接： kill 操作支持 mysql -h127.0.0.1 -P4000 inception show processlist; kill 2; Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"result.html":{"url":"result.html","title":"结果集说明","keywords":"","body":"1. 结果集说明1. 结果集说明 goInception给用户返回的信息有两种， 一种是提交给goInception的基础信息存在错误，比如源信息不全，或者源信息有错误等，这种情况下，直接报异常，包括错误码及错误信息，与MySQL服务器的异常是一样的，在外面正常处理即可。 二是如果没有上面的问题，都会以结果集的方式将检查结果告诉客户端。和mysql原生结果集一致。返回的结果集中，每一个行数据，就是一条提交的SQL语句，goInception内部将所有提交的语句块一条条的拆开，以结果集的方式返回，针对每一条语句，有什么问题或者状态，在结果集中是一目了然。 注意： 如果在语句中出现语法错误，则不能继续了，因为goInception已经不能将剩下的语句分开了，那么此时前面已经正常检查的多行为多个结果集的行返回，后面出错的语句为一行返回，当然这个的错误信息是语法错误。 goInception返回结果集的结构如下： order_id sql序号，从1开始。 stage 当前语句已经进行到的阶段，包括CHECKED、EXECUTED、RERUN、NONE， NONE表示没有做过任何处理，有可能前面有语法错误直接就提前返回了, CHECKED表示这个语句只做过审核，而没有再进行下一步操作， EXECUTED表示已经执行过，如果执行失败，也是用这个状态表示， RERUN表示的是，对于影响上下文的语句，已经执行成功，但为了与EXECUTED区分，用RERUN表示，主要是因为在执行过程中，如果某一条语句执行失败了，则上层可能需要将没有执行的语句提取出来，再次执行，那么影响上下文的语句是需要加上的，所以用RERUN来表示。影响上下文的语句一般包括set names和use db这两种，而当前Inception支持的只有这两种。 error_level 错误级别。返回值为非0的情况下，说明是有错的。0表示审核通过。1表示警告，不影响执行，2表示严重错误，必须修改 stage_status 阶段状态，用来表示检查及执行的过程是成功还是失败， 如果审核成功，则返回 Audit completed。 如果执行成功则返回Execute Successfully，否则返回Execute failed， 如果备份成功，则在后面追加Backup successfully，否则追加Backup failed， 这个列的返回信息是为了将结果集直接输出而设置的，如果在具体使用过程中，为了更友好的显示，可以在这基础上再做加工处理。 error_message 错误信息。用来表示出错错误信息，这里包括一条语句中所有的错误信息，用换行符分隔，但有时候如果某一个错误导致不能继续分析了，则后面的错误就不能显示出来。如果没有出错，则返回NULL。而对于执行及备份错误，因为对于一条语句，这样的错误只会有一次，那么执行错误会在后面追加“execute:具体的执行错误原因”，如果是备份出错，则在后面追加“backup:具体的备份错误原因”。 sql 用来表示当前检查的是哪条sql语句 affected_rows 执行时预计影响行数，在执行时显示的是真实影响行数。 sequence 这个列与上面说的备份功能有关系，其实就是对应$$Inception_backup_information$$表中的 opid_time 这个列，一一对应，这就为前端应用在针对某一操作回滚找到了入口，每次执行都会产生一个序号，如果要回滚，则就使用这个值从备份表中找到对应的回滚语句执行即可。详见备份功能 backup_dbname 这个列表示的是当前语句产生的备份信息，存储在备份服务器的哪个数据库中，这是一个字符串类型的值，只针对需要备份的语句，数据库名由IP地址、端口、源数据库名组成，由下划线连接。详见备份功能 execute_time 这个列表示当前语句执行时间，单位为秒，精确到小数点后两位。列类型为字符串，使用时可能需要转换成DOUBLE类型的值，如果只是审核而不执行，则这个列返回的值为0。 sqlsha1 这个列用来存储当前这个语句的一个HASH值，这是用来标识这个语句是不是会使用OSC功能，如果返回信息中有值，则表示这个语句在执行的时候会使用OSC，因为在执行前，会有一次单独的审核操作，此时上层已经可以拿到这个值，审核通过之后，语句是不会改变的，当然这个值也不会改变，那么在执行时就可以使用这个值来查看OSC执行的进度等信息，这个值一般长的样子如下：*D0210DFF35F0BC0A7C95CD98F5BCD4D9B0CA8154，具体其它信息，请参考 DDL变更:pt-osc和 DDL变更:gh-ost backup_time 生成当前SQL的备份语句耗时。 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"config.html":{"url":"config.html","title":"config.toml说明","keywords":"","body":"1. config.toml1.1. config.toml配置文件说明1.1.1. host1.1.2. port1.1.3. path1.1.4. [inc]1.1.5. [osc]1.1.6. [gh-ost]1.1.7. [log]1.1.8. [log.file]1. config.toml 1.1. config.toml配置文件说明 goInception通过./goInception -config=config/config.toml方式启动，接下来说明config.toml中的各项配置。 由于goInception采用TiDB源码重构，所以部分参数可参考TiDB相关文档 config.toml文件由几部分组成，分别为最外层配置如host,port等，以及各分组如[inc],[log]等，接下来逐一说明。 示例(该示例仅为展示config.toml文件结构，详细参数请参考)： host = \"0.0.0.0\" port = 4000 path = \"/tmp/tidb\" [log] # 日志参数 level = \"info\" format = \"text\" [log.file] # 日志文件参数 filename = \"\" max-size = 300 [inc] # 审核选项 enable_nullable = true enable_drop_table = false check_table_comment = false check_column_comment = false # 等等... [osc] # pt-osc参数 osc_on = false osc_min_table_size = 16 [ghost] # gh-ost参数 ghost_allow_on_master = true 1.1.1. host 绑定的IP地址，默认值 0.0.0.0 1.1.2. port 绑定的端口，默认值 4000 1.1.3. path TiDB数据库目录，默认值 /tmp/tidb，该参数会创建少量TiDB的系统表，如果设置为空时，则会在内存中创建。 建议指定实际目录，这样会加快启动的速度。 1.1.4. [inc] 所有的 审核选项 在此处设置 1.1.5. [osc] 所有的 pt-osc选项 在此处设置 1.1.6. [gh-ost] 所有的 gh-ost选项 在此处设置 1.1.7. [log] level 日志级别，默认值 info 可选值： debug, info, warn, error. format 日志格式，默认值 text 可选值： json, text, console disable-timestamp 禁用时间戳输出，默认值 false 1.1.8. [log.file] filename 日志文件，默认值 \"\" 建议指定日志文件，便于问题追溯 max-size 日志文件的最大上限(MB)，默认值 300 max-days 日志文件的保存天数，默认值 0，即不清理 max-backups 要保留的最大旧日志文件数，默认值 0，即不清理 log-rotate 日志轮询，默认值 true，即开启 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"permission.html":{"url":"permission.html","title":"权限说明","keywords":"","body":"1. 权限说明1.1. 审核功能1.2. 执行1.2.1. 使用pt-osc1.2.2. 使用gh-ost1.3. 备份1.3.1. 远端数据库1.3.2. 备份库1. 权限说明 不同功能及阶段需要不同的权限，下面会列出各项功能可能涉及的权限要求，如有遗漏之处欢迎提出和补充。 建议的权限为： GRANT ALL PRIVILEGES ON *.* TO ... 或者 GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, PROCESS, REFERENCES, INDEX, ALTER, SUPER, REPLICATION SLAVE, REPLICATION CLIENT, TRIGGER ON *.* TO ... 1.1. 审核功能 information_schema库 元数据查询权限，表结构，索引信息，约束等 mysql库 use权限，没有查询，默认连接该库，可通过调用选项的--db参数修改 DML操作 审核时会对DML语句做explain操作，该操作需要实际的相应DML权限。 REFERENCES 仅外键需要 1.2. 执行 实际的SQL执行权限 1.2.1. 使用pt-osc PROCESS 权限，查看processlist信息 TRIGGER 创建和删除触发器 SUPER 或 REPLICATION CLIENT 有主从时,查看主从延迟 1.2.2. 使用gh-ost SUPER|REPLICATION CLIENT, REPLICATION SLAVE binlog解析 ALTER, CREATE, DELETE, DROP, INDEX, INSERT, LOCK TABLES, SELECT, TRIGGER, UPDATE 1.3. 备份 1.3.1. 远端数据库 SUPER权限，用以binlog格式不为row时执行set session binlog_format='row' SUPER|REPLICATION CLIENT, REPLICATION SLAVE binlog解析 1.3.2. 备份库 建议授予备份库实例的所有权限 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"options.html":{"url":"options.html","title":"审核选项","keywords":"","body":"1. 审核选项1.1.1. 使用说明1.1.2. 重要说明(V1.2.2更新)1.1.3. 支持参数1. 审核选项 1.1.1. 使用说明 以下参数均通过mysql客户端连接,通过命令行形式方式调用goinception(类似MySQL服务) 1.1.2. 重要说明(V1.2.2更新) 从V1.2.2版本开始，支持在SQL语句内部动态设置审核选项，实现会话级变量设置！ (相关issue) 示例： /*--user=xxx;--password=xxx;--host=127.0.0.1;--port=3306;--check=1;*/ inception_magic_start; use test; drop table if exists t1,t2; inception set check_table_comment = 1; create table t1(id int primary key); inception set check_table_comment = 0; create table t2(id int primary key); inception_magic_commit; 审核结果(隐藏了部分列)： 注意，inception set 的行并不返回！除非set失败报错。 order_id stage error_level stage_status error_message sql 1 CHECKED 0 Audit Completed None use test_inc 2 CHECKED 0 Audit Completed None drop table if exists t1,t2 3 CHECKED 1 Audit Completed 表 't1' 需要设置注释. create table t1(id int primary key)values(1,1,1) 4 CHECKED 0 Audit Completed None create table t2(id int primary key) 1.1.3. 支持参数 goInception的审核规则可以通过inception show variables;查看 inception show variables; 支持以下方式设置: 1.通过inception set设置 inception set check_dml_limit = true; 2.配置config.toml,并通过-config=config.toml指定配置文件启动 参数 默认值 可选范围 说明 check_autoincrement_datatype false true,false 当建表时自增列的类型不为int或者bigint时报错 check_autoincrement_init_value false true,false 当建表时自增列的值指定的不为1，则报错 check_autoincrement_name false true,false 建表时，如果指定的自增列的名字不为ID，则报错，说明是有意义的，给提示 check_column_comment false true,false 建表时，列没有注释时报错 check_column_default_value false true,false 检查在建表、修改列、新增列时，新的列属性是不是要有默认值 check_column_position_change v0.9 false true,false 检查列位置/顺序变更 check_column_type_change v0.7.3 true true,false 检查字段类型变更 check_dml_limit false true,false 在DML语句中使用了LIMIT时，是不是要报错 check_dml_orderby false true,false 在DML语句中使用了Order By时，是不是要报错 check_dml_where false true,false 在DML语句中没有WHERE条件时，是不是要报错 check_float_double v1.0.2 false true,false 开启时,当使用 float/double 类型时提示转成 decimal 类型 check_identifier false true,false 检查标识符是否正确,规则是[a-z,A-Z,0-9,_] check_identifier_upper v1.0.2 false true,false 要求标识符即表名、列名、索引名等必须为大写,默认为false check_implicit_type_conversion v1.1.3 false true,false 检查where条件中是否存在隐式类型转换,默认值false check_index_prefix false true,false 是否检查索引前缀,索引前缀通过参数index_prefix和uniq_index_prefix配置 check_insert_field false true,false 是不是要检查插入语句中的列链表的存在性 check_primary_key false true,false 建表时，如果没有主键，则报错 check_table_comment false true,false 建表时，表没有注释时报错 check_timestamp_count v0.6.0 false true,false 配置是否检查current_timestamp数量 check_timestamp_default false true,false 建表时，如果没有为timestamp类型指定默认值，则报错 columns_must_have_index v1.2.2 \"\" string 指定的列必须添加索引。多个列时以逗号分隔(格式: 列名 [列类型,可选]),指定列类型时对类型也会限制. default_charset v1.0.5 \"utf8mb4\" string 设置连接数据库的默认字符集,默认值为utf8mb4 (解决低版本不支持utf8mb4的问题) enable_autoincrement_unsigned false true,false 自增列是不是要为无符号型 enable_any_statement v1.2.5 false true,false 是否允许所有语法(仍受其他开关影响,如删表等).详细说明见PR enable_blob_not_null v1.0 false true,false 是否允许blob/text/json类型置为not null,默认为false,即不允许 enable_blob_type false true,false 检查是不是支持BLOB字段，包括建表、修改列、新增列操作 enable_change_column v1.0.3 true true,false 设置是否支持change column语法,默认值true enable_column_charset false true,false 允许列自己设置字符集 enable_drop_database false true,false 是否允许删除数据库 enable_drop_table false true,false 是否允许删除表 enable_enum_set_bit false true,false 是不是支持enum,set,bit数据类型 enable_fingerprint v0.6.2 false true,false sql指纹功能。dml语句相似时，可以根据相同的指纹ID复用explain结果，以减少远端数据库explain操作，并提高审核速度 explain_rule v1.1.1 \"first\" \"first\", \"max\" explain判断受影响行数时使用的规则(\"first\", \"max\")。 \"first\": 使用第一行的explain结果作为受影响行数, \"max\": 使用explain结果中的最大值作为受影响行数 enable_foreign_key false true,false 是不是支持外键 enable_identifer_keyword false true,false 检查在SQL语句中，是不是有标识符被写成MySQL的关键字，默认值为报警。 enable_json_type v0.7.2 false true,false 设置是否允许json类型字段，包括建表、修改列、新增列操作 enable_minimal_rollback v1.1.2 false true,false 设置是否启用最小化回滚SQL，当开启时，update的回滚语句仅记录最小化变更(未变更列不再记录), 默认为false enable_not_innodb v1.0-rc4 已删除 false true,false 已删除! 请使用 enable_set_engine和 support_engine以便于更灵活的指定存储引擎。 建表指定的存储引擎不为Innodb，不报错 enable_nullable true true,false 创建或者新增列时是否允许列为NULL enable_null_index_name v0.7.1 false true,false 创建索引时是否允许空索引名 enable_orderby_rand false true,false order by rand时是不是报错 enable_partition_table false true,false 是不是支持分区表 enable_pk_columns_only_int false true,false 是否强制主键列必须是int enable_select_star false true,false Select*时是不是要报错 enable_set_charset false true,false 是否允许指定表和数据库的字符集 enable_set_collation v0.7 false true,false 是否允许指定表和数据库的排序规则 enable_set_engine v1.0-rc4 true true,false 是否允许指定存储引擎,默认为true enable_sql_statistic v0.9 false true,false 开启统计功能. 详见 统计功能 enable_timestamp_type v1.0.1 true true,false 设置是否允许 timestamp 类型字段，包括建表、修改列、新增列操作，默认为 true enable_use_view v1.2.4 false true,false 支持创建和使用视图 enable_zero_date v1.0.1 true true,false 设置是否支持时间为0值，关闭时强制报错。默认值为 true，即开启，此时会基于数据库sql_mode的NO_ZERO_DATE判断是否支持 general_log v0.8.1 false true,false 是否记录全量日志 hex_blob v1.1.4 false true,false 在解析binlog时,二进制类型如果无法以字符串形式保存,则以十六进制字符串转储(影响类型:binary,varbinary,blob),默认关闭 ignore_osc_alter_stmt v1.2.4 \"\" string 配置要强制忽略osc的alter子句. 格式为drop index,add column等,多个时以逗号分隔 lang v0.5.1 en-US en-US,zh-CN 返回的信息使用语言,可选值en-US,zh-CN lock_wait_timeout v1.2.4 -1 int 会话在执行SQL时的元数据锁等待超时,单位:秒 max_allowed_packet v1.0-rc3 4194304 int 允许的最大数据包大小.默认为 4194304,单位字节,即4MB max_char_length 0 int 最大char长度,当超出时警告转换为varchar类型 max_ddl_affect_rows v1.0.2 0 int 当DDL预估受影响行数超出设置值时警告,为0时不限制 max_insert_rows v0.6.3 0 int 设置insert values允许的最大行数.0为不限制 max_key_parts 3 int 一个索引最多可指定的列数 max_keys 3 int 单表允许的最大索引数 max_primary_key_parts 3 int 主键最多可指定的列数 max_update_rows 5000 int 当update/delete预估受影响行数超出设置值时警告 merge_alter_table false true,false 在多个改同一个表的语句出现是，报错，提示合成一个 must_have_columns v0.6.3 \"\" string 用以指定建表时必须创建的列。多个列时以逗号分隔(格式: 列名 [列类型,可选]) skip_sqls v1.0-rc3 \"\" string 指定不再审核的SQL.该参数指定要跳过的客户端/框架默认SQL,以实现客户端兼容 sql_mode v1.2.4 \"\" string 连接远程数据库的默认sql_mode设置 sql_safe_updates -1 -1,0,1 安全更新.-1表示不做操作,基于远端数据库,0表示关闭安全更新,1表示开启安全更新 support_charset utf8,utf8mb4 string 支持的字符集,多个时以逗号分隔 support_collation v0.7 \"\" string 支持的排序规则,多个时以逗号分隔 support_engine v1.0-rc4 \"innodb\" string 支持的存储引擎类型.默认为innodb,此处可以设置多个,以逗号分隔,或者修改默认的存在引擎类型 index_prefix v1.2.0 \"idx_\" string 普通索引前缀，默认为 idx_, 受审核参数 check_index_prefix 影响。为空时不限制 uniq_index_prefix v1.2.0 \"uniq_\" string 唯一索引前缀，默认为 uniq_, 受审核参数 check_index_prefix 影响。为空时不限制 table_prefix v1.2.0 \"\" string 表名前缀,默认为空,即不限制 wait_timeout v1.1.2 0 int 远端数据库等待超时时间, 单位:秒, 默认值为 0 时表示使用数据库默认值 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"rules.html":{"url":"rules.html","title":"审核规则","keywords":"","body":"1. 审核规则1.1. 支持语法1.2. DDL操作1.2.1. create table1.2.2. ALTER1.3. DML1.3.1. INSERT1.3.2. INSERT SELECT1.3.3. UPDATE/DELETE2. 说明1. 审核规则 了解和熟悉下面的审核规则，可以知道goinception大概做了哪些操作。 说明：下面所列出来的规则，不一定能覆盖所有goinception当前已经实现的功能，具体包括什么规则，还需要在使用过程中总结，发现，同时可以结合配置参数来详细了解这些规则。 1.1. 支持语法 语法 说明 use db 会检查这个库是否存在，需要连接到线上服务器来判断。 set names charset 仅支持这一个SET命令 create database 建库 create table 建表 alter table 修改表 drop table 删除表 truncate table 清空表 insert 插入语句(包括多值插入和查询插入) update 更新语句(包括多表关联更新) delete 删除语句(包括多表关联删除) inception命令集 查看进程,osc进程,查看/设置变量及审核级别等 用户管理命令 开启安全登陆后,可以创建/修改/删除用户,以及授权/收回和设置密码 1.2. DDL操作 1.2.1. create table 表属性 检查项 相关配置项 这个表不存在 当前库存在 对于create table like，会检查like的老表是不是存在。 表名、列名、索引名的长度不大于64个字节 对象名必须大写 check_identifier_upper 对象名允许字符[a-zA-Z0-9_] check_identifier 对象名不能使用关键字 enable_identifer_keyword 如果建立的是临时表，则必须要以tmp为前缀 不支持临时表! 字符集限制 enable_set_charset,support_charset 排序规则限制 enable_set_collation,support_collation 存储引擎限制 enable_set_engine,support_engine 不能建立为分区表 enable_partition_table 只能有一个自增列 只能有一个主键 表要有主键 check_primary_key 表要有注释 check_table_comment 至少有一个列 表必须包含某些列 must_have_columns 表注释长度不能溢出 不允许create table as 语法 禁止使用Foreign key enable_foreign_key 列属性 检查项 相关配置项 不能设置列的字符集 enable_column_charset 列的类型不能使用集合、枚举、位图类型 enable_enum_set_bit 列必须要有注释 check_column_comment char长度大于20的时候需要改为varchar（长度可配置） max_char_length 列的类型不能是BLOB/TEXT enable_blob_type 列的类型不能是JSON enable_json_type 不能有重复的列名 非数值列不能使用自增 不允许无效库名/表名前缀 每个列都使用not null enable_nullable 是否允许timestamp类型 enable_timestamp_type 如果是timestamp类型的，则要必须指定默认值。 check_timestamp_default 如果是datetime类型的，则要必须指定默认值。 check_datetime_default 不能同时有两个timestamp类型的列，如果是datetime类型，则不能有两个指定DEFAULT CURRENT_TIMESTAMP及ON UPDATE CURRENT_TIMESTAMP的列。 check_timestamp_count,check_datetime_count 只有timestamp或datatime才能指定on update on update表达式只能为CURRENT_TIMESTAMP 建议将 float/double 转成 decimal check_float_double 索引属性检查项 检查项 相关配置项 索引必须要有名字 enable_null_index_name Unique索引必须要以uniq_为前缀 check_index_prefix 普通索引必须要以idx_为前缀 check_index_prefix 索引的列数不能超过5个 max_key_parts 主键索引列数限制 max_primary_key_parts 主键列必须使用int或bigint enable_pk_columns_only_int 最多有5个索引 max_keys 建索引时，指定的列必须存在。 索引中的列，不能重复 BLOB列不能建做KEY 索引长度不能超过767或3072,由实际mysql的innodb_large_prefix决定 索引名不能是PRIMARY 索引名不能重复 默认值 检查项 相关配置项 BLOB/TEXT类型的列，不能有非NULL的默认值 enable_blob_not_null 如果默认值为NULL，但列类型为NOT NULL，或者是主键列，或者定义为自增列，则报错。 JSON列不能设置默认值。 每个列都需要定义默认值，除了自增列/主键/JSON/计算列/以及大字段列之外 check_column_default_value 自增列 检查项 相关配置项 建表时，自增列初始值为1 check_autoincrement_init_value 如果自增列的名字不为id，说明可能是有意义的，不建议 check_autoincrement_name 自增列类型必须为int或bigint check_autoincrement_datatype 自增列需要设置无符号 enable_autoincrement_unsigned 1.2.2. ALTER 检查项 相关配置项 创建索引 同建表 添加字段 同建表 默认值 同建表 检查字符集 同建表 检查排序规则 同建表 检查存储引擎 同建表 - - 表是否存在 同一个表的多个ALTER建议合并 merge_alter_table 列是否存在 表属性只支持对存储引擎、表注释、自增值及默认字符集的修改操作。 是否允许change column操作 enable_change_column 是否允许列顺序变更 check_column_position_change 是否允许列类型变更 check_column_type_change 1.3. DML 1.3.1. INSERT 检查项 相关配置项 表是否存在 列必须存在 必须指定插入列表，也就是要写入哪些列，如insert into t (id,id2) values(...) check_insert_field 必须指定值列表。 插入列列表与值列表个数相同 不为null的列，如果插入的值是null，报错 插入指定的列列表中，同一个列不能出现多次。 1.3.2. INSERT SELECT 检查项 相关配置项 涉及的所有库/表/字段必须存在 必须指定插入列表，也就是要写入哪些列，如insert into t (id,id2) select ... check_insert_field 是否允许select * enable_select_star 必须有where条件 check_dml_where 不能有limit条件 check_dml_limit 不能有order by rand子句 enable_orderby_rand 使用explain获取预估行数或select count获取真实行数 调用选项real_row_count,explain_rule 1.3.3. UPDATE/DELETE 检查项 相关配置项 表必须存在 必须有where条件 check_dml_where 不能有limit条件 check_dml_limit 不能有order by语句 check_dml_orderby 影响行数大于10000条，则报警（数目可配置） max_update_rows 对WHERE条件这个表达式做简单检查，具体包括什么不一一指定 多表更新、删除时，每个表及涉及字段必须要存在 限制一条insert values的总行数 max_insert_rows update 多表关联时,如果set未指定表前缀,自动判断 多表时判断未指明表前缀的列是否有歧义 update多表关联时,如果set了多个表的字段,同样支持回滚语句生成 使用explain获取预估行数或select count获取真实行数 调用选项realRowCount,explain_rule mysql版本在5.6之前时,自动将语句转换为select做explain 设置数据库sql_safe_updates参数 sql_safe_updates 多表关联时,审核join语句是否包含on子句 check_dml_where 条件中的列是否存在隐式类型转换 check_implicit_type_conversion update set 判断set使用了逗号还是and分隔 2. 说明 SQL审核主要针对mysql 5.7版本，其他版本支持会有通用的支持，但细节处可能会有差异，如果有什么问题，欢迎提交Issues来共同建设。 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"backup.html":{"url":"backup.html","title":"备份功能","keywords":"","body":"1. 备份功能1.1. 备份功能说明1.2. 备份功能权限要求1.2.1. 示例1.3. 备份功能写入规则1.4. 备份功能详细步骤1. 备份功能 1.1. 备份功能说明 goInception自带备份功能，首先服务启动时配置config.toml(放在 [inc] 段) 参数 默认值 可选范围 说明 backup_host \"\" string 备份数据库IP地址 backup_port 0 int 备份数据库端口 backup_user \"\" string 备份数据库用户名 backup_password \"\" string 备份数据库密码 并且在执行sql时，添加 --backup=true 或 --backup=1 选项 1.2. 备份功能权限要求 对远程数据库要求具有：REPLICATION CLIENT,REPLICATION CLIENT, 以进行binlog解析 对备份数据库要求具有：CREATE,INSERT,建议给所有权限, 便于生成备份 1.2.1. 示例 /*--user=root;--password=root;--host=127.0.0.1;--port=3306;--execute=1;--backup=1;*/ inception_magic_start; use test; create table t1(id int primary key); inception_magic_commit; 1.3. 备份功能写入规则 在备份服务器上，备份库的命名格式为：IP_PORT_库名，例如127_0_0_1_3306_test 在备份库上创建备份信息表$_$Inception_backup_information$_$，用来保存该库的执行信息和回滚语句信息 字段名 类型 说明 opid_time varchar(50) 执行操作ID,格式为时间戳_线程号_执行序号 start_binlog_file varchar(512) 起始binlog文件 start_binlog_pos int(11) 起始binlog位置 end_binlog_file varchar(512) 终止binlog文件 end_binlog_pos int(11) 终止binlog位置 sql_statement text 执行SQL host varchar(64) 执行IP地址 dbname varchar(64) 执行库名 tablename varchar(64) 执行表名 port int(11) 执行端口 time timestamp 执行时间 type varchar(20) 操作类型 在备份库有和操作表相同的表名，其表结构统一为： 字段名 类型 说明 id bigint 自增主键 rollback_statement mediumtext 回滚语句 opid_time varchar(50) 关联执行操作ID 1.4. 备份功能详细步骤 配置备份数据库，并在执行SQl时开启备份功能 在执行SQL前记录binlog位置和线程号(逐条执行逐条记录) 执行SQL 在执行SQL后记录binlog位置和线程号 开始备份，解析远程服务器binlog 在备份服务器创建备份库 创建备份信息表，写入执行信息和binlog位置信息 创建备份表， 逐步解析binlog，并生成回滚语句，写入备份表 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"osc.html":{"url":"osc.html","title":"DDL变更:pt-osc","keywords":"","body":"1. osc1.1.1. pt-online-schema-change1.1.2. 参数说明1. osc 1.1.1. pt-online-schema-change 使用前需要手动下载安装percona-toolkit (v3.0.4或参数兼容版本) 使用前需要指定pt-osc目录参数osc_bin_dir，默认为/usr/local/bin 参数设置 pt-osc工具的设置参数可以可以通过inception show variables like 'osc%';查看 inception show variables like 'osc%'; 支持以下方式设置: 1.通过inception set设置 inception set osc_check_interval = 10; 2.配置config.toml,并通过-config=config.toml指定配置文件启动 进程命令 查看osc进程 inception get osc processlist; 返回结果： DBNAME TABLENAME COMMAND SQLSHA1 PERCENT REMAINTIME INFOMATION test_inc t1 alter table t1 add column c33 int *E53542EFF4E179BE267210114EC5EDBEF9DC5D8F 9 00:36 Copying test_inc.t1: 9% 00:36 remain 查看指定osc进程 inception get osc_percent '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; 返回结果： DBNAME TABLENAME SQLSHA1 PERCENT REMAINTIME INFOMATION test_inc t1 *E53542EFF4E179BE267210114EC5EDBEF9DC5D8F 49 00:14 Copying test_inc.t1: 49% 00:14 remain 终止指定osc进程 终止后注意手动清理相关辅助表 inception kill osc '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; -- 或同义词 inception stop alter '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; 1.1.2. 参数说明 参数 默认值 可选范围 说明 osc_on false bool OSC开关 osc_alter_foreign_keys_method none string 对应OSC参数alter-foreign-keys-method osc_bin_dir /usr/local/bin string pt-online-schema-change脚本的位置 osc_check_alter true bool 对应参数--[no]check-alter osc_check_interval 5 int 对应参数--check-interval，意义是Sleep time between checks for --max-lag. osc_check_replication_filters true bool 对应参数--[no]check-replication-filters osc_chunk_size 1000 int 对应参数--chunk-size osc_chunk_size_limit 4 int 对应参数--chunk-size-limit osc_chunk_time 1 int 对应参数--chunk-time osc_check_unique_key_change v1.0.5 true bool 对应参数--[no]check_unique_key_change,设置是否检查唯一索引 osc_critical_thread_connected 1000 int 对应参数--critical-load中的thread_connected部分 osc_critical_thread_running 80 int 对应参数--critical-load中的thread_running部分 osc_drop_new_table true bool 对应参数--[no]drop-new-table osc_drop_old_table true bool 对应参数--[no]drop-old-table osc_max_flow_ctl v1.2.2 -1 int 对应参数--max-flow-ctl. 检查集群暂停流量控制所花费的平均时间 (仅适用于PXC 5.6及以上版本,版本自动判断). -1表示不开启. 非PXC集群会自动忽略该参数 osc_max_lag 3 int 对应参数--max-lag osc_max_thread_connected 1000 int 对应参数--max-load中的thread_connected部分 osc_max_thread_running 80 int 对应参数--max-load中的thread_running部分 osc_min_table_size 16 int OSC的开关，如果设置为0，则全部ALTER语句都走OSC，如果设置为非0，则当这个表占用空间大小大于这个值时才使用OSC方式。单位为M，这个表大小的计算方式是通过语句： select (DATA_LENGTH + INDEX_LENGTH)/1024/1024 from information_schema.tables where table_schema = \"dbname\" and table_name = \"tablename\"来实现的。 osc_print_none false bool 用来设置在Inception返回结果集中，对于原来OSC在执行过程的标准输出信息是不是要打印到结果集对应的错误信息列中，如果设置为1，就不打印，如果设置为0，就打印。而如果出现错误了，则都会打印 osc_print_sql false bool 对应参数--print osc_sleep v1.2.4 0.0 float 对应参数--sleep osc_recursion_method processlist string 对应参数recursion_method Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"ghost.html":{"url":"ghost.html","title":"DDL变更:gh-ost","keywords":"","body":"1. gh-ost1.1.1. 复用pt-osc参数1.1.2. 参数说明1. gh-ost 内置gh-ost源码(v1.0.48)，因此无须下载。 手动终止和暂停及恢复功能已开放相应命令，因此隐藏相关参数。 参数设置 gh-ost工具的设置参数可以可以通过inception show variables like 'ghost%';查看 inception show variables like 'ghost%'; 支持以下方式设置: 1.通过inception set设置 inception set osc_check_interval = 10; 2.配置config.toml,并通过-config=config.toml指定配置文件启动 进程命令 查看osc进程 inception get osc processlist; 返回结果： DBNAME TABLENAME COMMAND SQLSHA1 PERCENT REMAINTIME INFOMATION test_inc t1 alter table t1 add column c33 int *E53542EFF4E179BE267210114EC5EDBEF9DC5D8F 9 00:36 Copying test_inc.t1: 9% 00:36 remain 查看指定osc进程 inception get osc_percent '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; 返回结果： DBNAME TABLENAME SQLSHA1 PERCENT REMAINTIME INFOMATION test_inc t1 *E53542EFF4E179BE267210114EC5EDBEF9DC5D8F 49 00:14 Copying test_inc.t1: 49% 00:14 remain 终止指定osc进程 终止后注意手动清理相关辅助表 inception kill osc '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; -- 或同义词 inception stop alter '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; 暂停指定osc进程 inception pause osc '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; -- 或同义词 inception pause alter '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; 恢复指定osc进程 inception resume osc '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; -- 或同义词 inception resume alter '*E53542EFF4E179BE267210114EC5EDBEF9DC5D8F'; 1.1.1. 复用pt-osc参数 参数 默认值 可选范围 说明 osc_critical_thread_connected 1000 int 对应参数--critical-load中的thread_connected部分 osc_critical_thread_running 80 int 对应参数--critical-load中的thread_running部分 osc_max_thread_connected 1000 int 对应参数--max-load中的thread_connected部分 osc_max_thread_running 80 int 对应参数--max-load中的thread_running部分 osc_min_table_size 16 int OSC的开关，如果设置为0，则全部ALTER语句都走OSC，如果设置为非0，则当这个表占用空间大小大于这个值时才使用OSC方式。单位为M，这个表大小的计算方式是通过语句： select (DATA_LENGTH + INDEX_LENGTH)/1024/1024 from information_schema.tables where table_schema = \"dbname\" and table_name = \"tablename\"来实现的。 osc_print_none false bool 用来设置在Inception返回结果集中，对于原来OSC在执行过程的标准输出信息是不是要打印到结果集对应的错误信息列中，如果设置为1，就不打印，如果设置为0，就打印。而如果出现错误了，则都会打印 1.1.2. 参数说明 参数 默认值 可选范围 说明 ghost_on false bool gh-ost开关 ghost_aliyun_rds false bool 阿里云rds数据库标志 ghost_allow_master_master false bool 允许gh-ost运行在双主复制架构中，一般与-assume-master-host参数一起使用 ghost_allow_nullable_unique_key false bool 允许gh-ost在数据迁移(migrate)依赖的唯一键可以为NULL，默认为不允许为NULL的唯一键。如果数据迁移(migrate)依赖的唯一键允许NULL值，则可能造成数据不正确，请谨慎使用。 ghost_allow_on_master true bool 允许gh-ost直接运行在主库上。默认gh-ost连接的主库。(暂未添加从库地址的配置) ghost_approve_renamed_columns true bool 如果支持修改列名,则需设置此参数为true,否则gh-ost不会执行。 ghost_assume_master_host string 为gh-ost指定一个主库，格式为\"ip:port\"或者\"hostname:port\"。默认推荐gh-ost连接从库。 ghost_assume_rbr true bool 确认gh-ost连接的数据库实例的binlog_format=ROW的情况下，可以指定-assume-rbr，这样可以禁止从库上运行stop slave,start slave,执行gh-ost用户也不需要SUPER权限。为避免影响生产数据库，此参数建议置为true ghost_chunk_size 1000 int 在每次迭代中处理的行数量(允许范围：100-100000)，默认值为1000。 ghost_concurrent_rowcount true bool 该参数如果为True(默认值)，则进行row-copy之后，估算统计行数(使用explain select count(*)方式)，并调整ETA时间，否则，gh-ost首先预估统计行数，然后开始row-copy。 ghost_critical_load_hibernate_seconds 0 int 负载达到critical-load时，gh-ost在指定的时间内进入休眠状态。 它不会读/写任何来自任何服务器的任何内容。 ghost_critical_load_interval_millis 0 int 当值为0时，当达到-critical-load，gh-ost立即退出。当值不为0时，当达到-critical-load，gh-ost会在-critical-load-interval-millis秒数后，再次进行检查，再次检查依旧达到-critical-load，gh-ost将会退出。 ghost_cut_over atomic string 选择cut-over类型:atomic/two-step，atomic(默认)类型的cut-over是github的算法，two-step采用的是facebook-OSC的算法。 ghost_cut_over_exponential_backoff false bool Wait exponentially longer intervals between failed cut-over attempts. Wait intervals obey a maximum configurable with 'exponential-backoff-max-interval'). ghost_cut_over_lock_timeout_seconds 3 int gh-ost在cut-over阶段最大的锁等待时间，当锁超时时，gh-ost的cut-over将重试。(默认值：3) ghost_default_retries 60 int 各种操作在panick前重试次数。(默认为60) ghost_discard_foreign_keys false bool 该参数针对一个有外键的表，在gh-ost创建ghost表时，并不会为ghost表创建外键。该参数很适合用于删除外键，除此之外，请谨慎使用。 ghost_dml_batch_size 10 int 在单个事务中应用DML事件的批量大小（范围1-100）（默认值为10） ghost_exact_rowcount false bool 准确统计表行数(使用select count(*)的方式)，得到更准确的预估时间。 ghost_exponential_backoff_max_interval 64 int Maximum number of seconds to wait between attempts when performing various operations with exponential backoff. (default 64) ghost_force_named_cut_over false bool When true, the ‘unpostpone | cut-over’ interactive command must name the migrated table。 ghost_force_table_names string table name prefix to be used on the temporary tables ghost_gcp false bool google云平台支持 ghost_heartbeat_interval_millis 500 int gh-ost心跳频率值，默认为500ms。 ghost_initially_drop_ghost_table false bool gh-ost操作之前，检查并删除已经存在的ghost表。该参数不建议使用，请手动处理原来存在的ghost表。 ghost_initially_drop_old_table false bool gh-ost操作之前，检查并删除已经存在的旧表。该参数不建议使用，请手动处理原来存在的ghost表。 ghost_initially_drop_socket_file false bool gh-ost强制删除已经存在的socket文件。该参数不建议使用，可能会删除一个正在运行的gh-ost程序，导致DDL失败。 ghost_max_lag_millis 1500 int 主从复制最大延迟时间，当主从复制延迟时间超过该值后，gh-ost将采取节流(throttle)措施，默认值：1500ms。 ghost_nice_ratio 0 float 每次chunk时间段的休眠时间，范围[0.0...100.0]。e.g:0：每个chunk时间段不休眠，即一个chunk接着一个chunk执行；1：每row-copy 1毫秒，则另外休眠1毫秒；0.7：每row-copy 10毫秒，则另外休眠7毫秒。 ghost_ok_to_drop_table true bool gh-ost操作结束后，删除旧表，默认状态是删除旧表。 ghost_postpone_cut_over_flag_file string 当这个文件存在的时候，gh-ost的cut-over阶段将会被推迟，直到该文件被删除。 ghost_replication_lag_query string 检查主从复制延迟的SQL语句，默认gh-ost通过show slave status获取Seconds_behind_master作为主从延迟时间依据。如果使用pt-heartbeat工具，检查主从复制延迟的SQL语句类似于:SELECT ROUND(UNIX_TIMESTAMP() - MAX(UNIX_TIMESTAMP(ts))) AS delay FROM my_schema.heartbeat; ghost_skip_foreign_key_checks true bool 跳过外键检查,默认为true ghost_throttle_additional_flag_file string 当该文件被创建后，gh-ost操作立即停止。该参数可以用在多个gh-ost同时操作的时候，创建一个文件，让所有的gh-ost操作停止，或者删除这个文件，让所有的gh-ost操作恢复。 ghost_throttle_control_replicas string 列出所有需要被检查主从复制延迟的从库。 ghost_throttle_flag_file string 当该文件被创建后，gh-ost操作立即停止。该参数适合控制单个gh-ost操作。-throttle-additional-flag-file string适合控制多个gh-ost操作。 ghost_throttle_http string The --throttle-http flag allows for throttling via HTTP. Every 100ms gh-ost issues a HEAD request to the provided URL. If the response status code is not 200 throttling will kick in until a 200 response status code is returned. ghost_throttle_query string 节流查询。每秒钟执行一次。当返回值=0时不需要节流，当返回值>0时，需要执行节流操作。该查询会在数据迁移(migrated)服务器上操作，所以请确保该查询是轻量级的。 ghost_timestamp_old_table false bool 在旧表名中使用时间戳。 这会使旧表名称具有唯一且无冲突的交叉迁移 ghost_tungsten false bool 告诉gh-ost你正在运行的是一个tungsten-replication拓扑结构。 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"levels.html":{"url":"levels.html","title":"自定义审核级别","keywords":"","body":"1. 自定义审核级别1.1.1. 功能说明1.1.2. 示例：实现限制 delete语句必须有where条件1. 自定义审核级别 1.1.1. 功能说明 自定义审核级别用以实现指定审核结果的错误级别。 对应审核结果的 error_level 字段： 2 为错误，即强限制，无法执行 1 为警告，即弱限制，可通过忽略警告参数ignore_warnings跳过 0 为正常，即不做限制 查看命令 inception show levels; 筛选查看 # 筛选指定审核名称 inception show levels like '%blob%'; # 筛选指定级别 inception show levels where value=2; # 筛选指定关键字 inception show levels where `desc` like '%index%'; 设置审核级别命令 inception set level er_no_where_condition = 2; 配置文件 config.toml配置文件 参数的可选值均为 0,1,2 [inc_level] er_alter_table_once = 1 er_auto_incr_id_warning = 1 er_autoinc_unsigned = 1 ... 1.1.2. 示例：实现限制 delete语句必须有where条件 1.开启where条件审核选项 inception show variables like '%where%'; inception set check_dml_where = 1; 2.设置where条件的审核级别为错误 (2) inception show levels like '%where%'; inception set level er_no_where_condition = 2; 3.验证审核结果 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"kill_stmt.html":{"url":"kill_stmt.html","title":"KILL操作","keywords":"","body":"1. KILL操作1.1.1. goInception KILL1.1.2. 远端数据库KILL(不建议)1.1.3. goInception备份库KILL (完全不建议)1. KILL操作 使用前请连接goInception并使用inception show processlist确认当前阶段(STATE) 阶段分为三种： CHECKING (审核中) EXECUTING (执行中) BACKUP (备份中) KILL操作执行位置 远端数据库,即执行实际sql的数据库 goInception goInception配置的备份库 1.1.1. goInception KILL 当前阶段 kill后的结果 CHECKING 在当前语句 审核完成 后中止审核，此时仅返回从开始到当前语句的审核结果，后续SQL不再审核 EXECUTING 在当前语句 执行完成 后中止执行，如果开启了备份，会执行备份操作，未开启则直接返回 BACKUP 在当前binlog事件 解析完成后中止备份，但已生成的回滚语句会继续写入备份库，待写入完成后返回 1.1.2. 远端数据库KILL(不建议) 当前阶段 kill后的结果 CHECKING kill操作不会影响审核，连接被kill后会自动重连(原因是审核失败**不会中止审核**，所以需要重连，并恢复断开的数据库，以避免后续SQL访问错数据库) EXECUTING (语句kill后执行失败) 语句用时过长时，此时kill会直接停止goInception语句的执行，如果开启了备份，会执行备份操作，未开启则直接返回 EXECUTING (语句kill后执行成功，连接断开) 语句执行比较快时，可能已经执行成功，此时需要根据binlog备份做进一步校验，所以依赖备份功能 BACKUP 1.1.3. goInception备份库KILL (完全不建议) 当前阶段 kill后的结果 CHECKING 在开始备份前会自动检测连接并重连，所以该操作无效 EXECUTING 在开始备份前会自动检测连接并重连，所以该操作无效 BACKUP 执行可能成功也可能失败，会导致备份结果不确定，因此完全不建议在备份库执行KILL操作 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"statistics.html":{"url":"statistics.html","title":"统计功能","keywords":"","body":"1. 统计功能2. 说明1. 统计功能 统计功能用以记录操作占比，通过参数 enable_sql_statistic 开启。 除了上面的参数之外，使用这个功能还需要开启操作备份功能，因为这些统计数据需要存储到备份数据库中，存储的数据库名为inception中， 这个数据库现在只有一个表statistic，存储的就是SQL执行数目的统计数据。 statistic表的结构如下： 从每一个列的名字就可以看到，其值对应的操作是什么，每一个列就是一个自增列，第二个列optime是操作时间，这个主要是用来统计在某一段时间内的某一个操作占多少比例。 部分列说明： deleting : 包括普通的删除操作及多表删除操作。 inserting : 包括单行插入、多行插入及查询插入。 updating : 包括普通单表更新及多表的更新。 renaming : 指的是ALTER table语句中的rename操作。 createindex : 指的是ALTER table语句中的add index操作。 dropindex : 指的是ALTER table语句中的drop index操作。 alteroption : 指的是ALTER table语句中的修改表属性的操作，比如存储引擎、自增值及字符集中操作。 alterconvert : 指的是ALTER table语句中修改表字符集的操作。 对于ALTER TABLE操作，因为这个操作包含很多的子操作，比如rename、drop index、engine innodb等操作，所以对于列altertable，它的值是renaming, createindex, dropindex, addcolumn, dropcolumn, changecolumn, alteroption, alterconvert的和, 而后面的是对ALTER TABLE语句的细分操作统计。 那么如果现在想要统计某一个操作，比如修改表占所有操作的百分比，则使用如下语句即可完成： SELECT Sum(a.oprate) / Count(1) updaterate FROM (SELECT ( updating ) / ( usedb + deleting + inserting + updating + selecting + altertable + createtable + droptable + createdb + truncating ) oprate FROM inception.statistic) a; 2. 说明 只是审核操作，或者审核失败未执行时，不会进行操作统计。 goInception会记录实际执行的数据，即如果执行一部分后失败时，只记录实际执行的操作。 备份出错导致提前返回时，不会影响统计信息。 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"tree.html":{"url":"tree.html","title":"语法树打印","keywords":"","body":"1. 语法树打印1.1. 结果集信息1.1.1. 示例1. 语法树打印 1.1. 结果集信息 可以通过设置选项--query-print=1或者--enable-query-print来启用打印语法树的功能， 同样的，它与其它enable开头的选项是互斥的，不能同时设置，开启之后，再连接goInception，执行返回的结果集所包括的列如下： ID：这个用来表示当前语句的一个序列值。 STATEMENT：这个列用来存储当前被分析的SQL语句。 ERRLEVEL：这个列用来存储当打印遇到问题时，错误的级别，与审核结果集中的ERRLEVEL意义相同。 QUERY_TREE：这个列就是对当前语句的分析结果，格式为JSON字符串。 ERRMSG：这个列与上面的ERRLEVEL对应，当出错时，这里存储分析过程中所有的错误信息，与审核结果集中的同名列意义相同。 1.1.1. 示例 SQL语句： INSERT INTO t (sno, name) SELECT sno, name FROM t alias_t WHERE sno = (SELECT sno + 1 FROM my WHERE name LIKE \"%zhufeng%\" AND sno > '10010' AND name = alias_t.name) ORDER BY name LIMIT 100, 10; 返回的结果对应的Json可视化的query_tree如下： { \"text\": \"insert into t (sno,name)\\n select sno, name from t alias_t\\n where sno=(\\n select sno+1 from my\\n where\\n name like \\\"%zhufeng%\\\" and\\n sno > '10010' and\\n name=alias_t.name\\n )\\n order by name\\n limit 100, 10\", \"IsReplace\": false, \"IgnoreErr\": false, \"Table\": { \"text\": \"\", \"TableRefs\": { \"text\": \"\", \"resultFields\": null, \"Left\": { \"text\": \"\", \"Source\": { \"text\": \"\", \"resultFields\": null, \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"t\", \"L\": \"t\" }, \"DBInfo\": null, \"TableInfo\": null, \"IndexHints\": null }, \"AsName\": { \"O\": \"\", \"L\": \"\" } }, \"Right\": null, \"Tp\": 0, \"On\": null, \"Using\": null, \"NaturalJoin\": false, \"StraightJoin\": false } }, \"Columns\": [ { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"sno\", \"L\": \"sno\" } }, { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"name\", \"L\": \"name\" } } ], \"Lists\": null, \"Setlist\": null, \"Priority\": 0, \"OnDuplicate\": null, \"Select\": { \"text\": \"\", \"resultFields\": null, \"SQLCache\": true, \"CalcFoundRows\": false, \"StraightJoin\": false, \"Priority\": 0, \"Distinct\": false, \"From\": { \"text\": \"\", \"TableRefs\": { \"text\": \"\", \"resultFields\": null, \"Left\": { \"text\": \"\", \"Source\": { \"text\": \"\", \"resultFields\": null, \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"t\", \"L\": \"t\" }, \"DBInfo\": null, \"TableInfo\": null, \"IndexHints\": null }, \"AsName\": { \"O\": \"alias_t\", \"L\": \"alias_t\" } }, \"Right\": null, \"Tp\": 0, \"On\": null, \"Using\": null, \"NaturalJoin\": false, \"StraightJoin\": false } }, \"Where\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 40, \"Op\": 7, \"L\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"sno\", \"L\": \"sno\" } }, \"Refer\": null }, \"R\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 32, \"Query\": { \"text\": \"select sno+1 from my\\n where\\n name like \\\"%zhufeng%\\\" and\\n sno > '10010' and\\n name=alias_t.name\\n \", \"resultFields\": null, \"SQLCache\": true, \"CalcFoundRows\": false, \"StraightJoin\": false, \"Priority\": 0, \"Distinct\": false, \"From\": { \"text\": \"\", \"TableRefs\": { \"text\": \"\", \"resultFields\": null, \"Left\": { \"text\": \"\", \"Source\": { \"text\": \"\", \"resultFields\": null, \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"my\", \"L\": \"my\" }, \"DBInfo\": null, \"TableInfo\": null, \"IndexHints\": null }, \"AsName\": { \"O\": \"\", \"L\": \"\" } }, \"Right\": null, \"Tp\": 0, \"On\": null, \"Using\": null, \"NaturalJoin\": false, \"StraightJoin\": false } }, \"Where\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Op\": 1, \"L\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Op\": 1, \"L\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Expr\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"name\", \"L\": \"name\" } }, \"Refer\": null }, \"Pattern\": { \"text\": \"\", \"k\": 5, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": \"JXpodWZlbmcl\", \"x\": null, \"Type\": { \"Tp\": 253, \"Flag\": 0, \"Flen\": 9, \"Decimal\": -1, \"Charset\": \"utf8\", \"Collate\": \"utf8_bin\", \"Elems\": null }, \"flag\": 0, \"projectionOffset\": -1 }, \"Not\": false, \"Escape\": 92, \"PatChars\": null, \"PatTypes\": null }, \"R\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Op\": 10, \"L\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"sno\", \"L\": \"sno\" } }, \"Refer\": null }, \"R\": { \"text\": \"\", \"k\": 5, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": \"MTAwMTA=\", \"x\": null, \"Type\": { \"Tp\": 253, \"Flag\": 0, \"Flen\": 5, \"Decimal\": -1, \"Charset\": \"utf8\", \"Collate\": \"utf8_bin\", \"Elems\": null }, \"flag\": 0, \"projectionOffset\": -1 } } }, \"R\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Op\": 7, \"L\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"name\", \"L\": \"name\" } }, \"Refer\": null }, \"R\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"alias_t\", \"L\": \"alias_t\" }, \"Name\": { \"O\": \"name\", \"L\": \"name\" } }, \"Refer\": null } } }, \"Fields\": { \"text\": \"\", \"Fields\": [ { \"text\": \"sno+1\", \"Offset\": 108, \"WildCard\": null, \"Expr\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Op\": 11, \"L\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"sno\", \"L\": \"sno\" } }, \"Refer\": null }, \"R\": { \"text\": \"\", \"k\": 1, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 1, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 8, \"Flag\": 128, \"Flen\": 1, \"Decimal\": 0, \"Charset\": \"binary\", \"Collate\": \"binary\", \"Elems\": null }, \"flag\": 0, \"projectionOffset\": -1 } }, \"AsName\": { \"O\": \"\", \"L\": \"\" }, \"Auxiliary\": false } ] }, \"GroupBy\": null, \"Having\": null, \"OrderBy\": null, \"Limit\": null, \"LockTp\": 0, \"TableHints\": null, \"IsAfterUnionDistinct\": false, \"IsInBraces\": false }, \"Evaluated\": false, \"Correlated\": false, \"MultiRows\": false, \"Exists\": false } }, \"Fields\": { \"text\": \"\", \"Fields\": [ { \"text\": \"sno\", \"Offset\": 40, \"WildCard\": null, \"Expr\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"sno\", \"L\": \"sno\" } }, \"Refer\": null }, \"AsName\": { \"O\": \"\", \"L\": \"\" }, \"Auxiliary\": false }, { \"text\": \"name\", \"Offset\": 45, \"WildCard\": null, \"Expr\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"name\", \"L\": \"name\" } }, \"Refer\": null }, \"AsName\": { \"O\": \"\", \"L\": \"\" }, \"Auxiliary\": false } ] }, \"GroupBy\": null, \"Having\": null, \"OrderBy\": { \"text\": \"\", \"Items\": [ { \"text\": \"\", \"Expr\": { \"text\": \"\", \"k\": 0, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 0, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 0, \"Flag\": 0, \"Flen\": 0, \"Decimal\": 0, \"Charset\": \"\", \"Collate\": \"\", \"Elems\": null }, \"flag\": 8, \"Name\": { \"text\": \"\", \"Schema\": { \"O\": \"\", \"L\": \"\" }, \"Table\": { \"O\": \"\", \"L\": \"\" }, \"Name\": { \"O\": \"name\", \"L\": \"name\" } }, \"Refer\": null }, \"Desc\": false } ], \"ForUnion\": false }, \"Limit\": { \"text\": \"\", \"Count\": { \"text\": \"\", \"k\": 2, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 10, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 8, \"Flag\": 160, \"Flen\": 2, \"Decimal\": 0, \"Charset\": \"binary\", \"Collate\": \"binary\", \"Elems\": null }, \"flag\": 0, \"projectionOffset\": -1 }, \"Offset\": { \"text\": \"\", \"k\": 2, \"collation\": 0, \"decimal\": 0, \"length\": 0, \"i\": 100, \"b\": null, \"x\": null, \"Type\": { \"Tp\": 8, \"Flag\": 160, \"Flen\": 3, \"Decimal\": 0, \"Charset\": \"binary\", \"Collate\": \"binary\", \"Elems\": null }, \"flag\": 0, \"projectionOffset\": -1 } }, \"LockTp\": 0, \"TableHints\": null, \"IsAfterUnionDistinct\": false, \"IsInBraces\": false } } Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"trans.html":{"url":"trans.html","title":"事务","keywords":"","body":"1. 事务1.1. 介绍1.2. 配置1.2.1. 示例1.3. 执行1.4. 回滚1. 事务 1.1. 介绍 事务功能实现了DML语句按批次提交，以提高大批量DML语句的执行效率，以及保证事务一致性（仅同一批次中）。 以下详细说明配置方式以及涉及的回滚差异等。 1.2. 配置 在调用goInception时添加参数--trans=?，其中参数值为数字， 默认为0，即不开启事务(逐行提交) 当大于1时，会按该参数分批进行提交，如500，则会按500条DML提交一次 1.2.1. 示例 import pymysql sql = '''/*--host=127.0.0.1;--port=3306;--user=test;--password=test;\\ --execute=1;--backup=1;--ignore-warnings=1;--trans=100;*/ inception_magic_start; use test_inc; -- drop table if exists t1; create table t1 (id int primary key,c1 int ,c2 varchar(100)); insert into t1 values(1,2,'ccc'); insert into t1 values(2,2,'ccc'); insert into t1 values(3,3,'ccc'); insert into t1 values(4,2,'ccc'); insert into t1 values(5,2,'ccc'); inception_magic_commit;''' conn = pymysql.connect(host='127.0.0.1', user='', passwd='', db='', port=4000, charset=\"utf8mb4\") cur = conn.cursor() ret = cur.execute(sql) result = cur.fetchall() cur.close() conn.close() for row in result: print(row) 1.3. 执行 未开启事务前为逐行提交 开启事务后，按设置条数提交。如设为500，则会500条DML提交一次 DDL执行无差异 当事务提交失败时，会回滚该批次的SQL，并立即中止(已执行SQL仍会生成回滚语句，以便有需要时快速回滚) 在事务中如果有DDL语句，会自动提交DML，因此混合DDL和DML不会影响该功能。 1.4. 回滚 回滚无差异 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"safe.html":{"url":"safe.html","title":"用户管理/鉴权","keywords":"","body":"1. goinception用户鉴权1.1.1. 说明1. goinception用户鉴权 1.1.1. 说明 goinception本身基于TiDB，所以拥有完整的用户管理模块，为了简单使用，默认是关闭该功能的。 开启鉴权方法: 在 config.toml 配置文件添加以下参数(文件根节点或者[inc]节点) skip_grant_table = false 相应的语法支持如下: CREATE USER DROP USER ALTER USER SET PASSWORD FOR GRANK/REVOKE 可能用不到 SELECT * FROM MYSQL.USER 用户查询 默认初始用户为root, 密码为空 忘记密码后可以通过跳过鉴权的方式重新启动，修改密码后开启鉴权并重启goinception。 在非正常关闭时数据目录(默认为/tmp/tidb)可能损坏，此时需要删除该目录并重启，但已创建用户会丢失，因此请注意备份该目录或保存用户创建脚本。 该功能是唯一需要注意保存数据目录的，其他功能均不需要。 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"diff.html":{"url":"diff.html","title":"对比inception","keywords":"","body":"1. 对比inception1.1. 功能对比1.2. 速度1.3. 上手和使用1.4. 部分优化说明1. 对比inception 1.1. 功能对比 功能 inception goInception 说明 审核 ✓ ✓ 基本无差异 执行 ✓ ✓ 基本无差异 pt-osc工具 ✓ ✓ 基本无差异 gh-ost工具 ✕ ✓ 备份 ✓ ✓ 基本无差异 忽略警告 ✓ ✓ 基本无差异 只读参数 ✓ ✕ goinception未提供 打印SQL语法树 ✓ ✓ inception的感觉更友好 DDL和DML拆分功能 ✓ ✓ goinception支持混合执行，不会影响回滚解析 执行部分后休眠 ✓ ✓ goinception支持执行指定条数后休眠 计算真实受影响行数 ✕ ✓ 事务支持 ✕ ✓ SQL指纹功能 ✕ ✓ dml语句相似时，可以根据相同的指纹ID复用explain结果，以减少远端数据库explain操作，提高审核速度 1.2. 速度 模块 inception goInception 说明 审核 审核速度inception占优，优势微弱 执行 执行速度相近 备份 备份速度goinception领先(批量备份)，优势较大 1.3. 上手和使用 分类 inception goInception 说明 快速部署 goinception可使用二进制部署，下载即用 问题调试 goinception有较多日志输出，便于问题快速定位 接口调用 限python,c,c++ 实现了mysql数据库驱动的语言 1.4. 部分优化说明 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"support.html":{"url":"support.html","title":"赞助&定制","keywords":"","body":"1. 赞助与支持1.1. 赞助者名单1.2. 定制化需求1. 赞助与支持 如果goInception于你有所帮助，可以激励一下作者以作支持。 您的企业or个人信息将会展示在 赞助者名单 中以作感谢。 对于大力赞助的企业与个人，可联系作者将公司或个人logo添加到项目首页，并优先考虑对其需求定制化开发。 1.1. 赞助者名单 1.2. 定制化需求 提供定制化服务。 具体事宜请通过邮箱或QQ群联系。 邮箱：chuanchuanhan@gmail.com QQ群：499262190 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "},"changelog.html":{"url":"changelog.html","title":"更新日志","keywords":"","body":"1. goInception 更新日志1.1. [v1.2.4] - 2020-12-191.1.1. Fix1.1.2. New Features1.1.3. Update1.2. [v1.2.3] - 2020-05-221.2.1. Fix1.2.2. New Features1.2.3. Update1.3. [v1.2.2] - 2020-04-041.3.1. Fix1.3.2. New Features1.3.3. Update1.4. [v1.2.1] - 2020-03-071.4.1. Fix1.4.2. New Features1.4.3. Update1.5. [v1.2.0] - 2020-01-181.5.1. Fix1.5.2. New Features1.5.3. Update1.6. [v1.1.6] - 2020-01-021.6.1. Fix1.6.2. New Features1.6.3. Update1.7. [v1.1.5] - 2019-12-091.7.1. Update1.8. [v1.1.4] - 2019-11-211.8.1. Fix1.8.2. New Features1.9. [v1.1.3] - 2019-11-131.9.1. Fix1.9.2. New Features1.9.3. Update1.10. [v1.1.2] - 2019-10-301.10.1. Fix1.10.2. New Features1.11. [v1.1.1] - 2019-10-131.11.1. Fix1.11.2. New Features1.11.3. Update1.12. [v1.1.0] - 2019-9-71.12.1. Fix1.12.2. New Features1.12.3. Update1.13. [v1.0.5] - 2019-8-201.13.1. Fix1.13.2. New Features1.13.3. Update1.14. [v1.0.4] - 2019-8-51.14.1. New Features1.14.2. Update1.15. [v1.0.3] - 2019-7-291.15.1. Fix1.15.2. New Features1.15.3. Update1.16. [v1.0.2] - 2019-7-261.16.1. Fix1.16.2. New Features1.16.3. Update1.17. [v1.0.1] - 2019-7-201.17.1. Fix1.17.2. New Features1.17.3. Update1.18. [v1.0] - 2019-7-151.18.1. Fix1.18.2. New Features1.18.3. Update1.19. [v1.0-rc4] - 2019-7-91.19.1. Fix1.19.2. New Features1.19.3. Update1.20. [v1.0-rc3] - 2019-7-21.20.1. Fix1.20.2. New Features1.20.3. Update1.21. [v1.0-rc2] - 2019-6-211.21.1. Fix1.21.2. Update1.22. [v1.0-rc1] - 2019-6-121.22.1. New Features1.23. [v0.9-beta] - 2019-6-41.23.1. New Features1.23.2. Update1.24. [v0.8.3-beta] - 2019-5-301.24.1. Fix1.24.2. Update1.25. [v0.8.2-beta] - 2019-5-271.25.1. Fix1.26. [v0.8.1-beta] - 2019-5-241.26.1. Fix1.26.2. New Features1.26.3. Update1.27. [v0.8-beta] - 2019-5-221.27.1. Fix1.27.2. Update1.28. [v0.7.5-beta] - 2019-5-171.28.1. Fix1.28.2. New Features1.28.3. Update1.29. [v0.7.4-beta] - 2019-5-121.29.1. New Features1.30. [v0.7.3-beta] - 2019-5-101.30.1. Fix1.30.2. New Features1.30.3. Update1.31. [v0.7.2-beta] - 2019-5-71.31.1. New Features1.31.2. Update1.32. [v0.7.1-beta] - 2019-5-41.32.1. Update1.32.2. Fix1.32.3. New Features1.33. [v0.7-beta] - 2019-4-261.33.1. Update1.33.2. Fix1.33.3. New Features1.34. [v0.6.4-beta] - 2019-4-231.34.1. Fix1.35. [v0.6.3-beta] - 2019-4-221.35.1. New Features1.36. [v0.6.2-beta] - 2019-4-181.36.1. Update1.36.2. Fix1.37. [v0.6.1-beta] - 2019-4-91.37.1. Update1.37.2. Fix1.37.3. New Features1.38. [v0.6-beta] - 2019-4-31.38.1. Update1.38.2. Fix1.38.3. New Features1.39. [v0.5.3-beta] - 2019-3-251.39.1. Update1.39.2. Fix1.40. [v0.5.2-beta] - 2019-3-171.40.1. Update1.41. [v0.5.1-beta] - 2019-3-141.41.1. Update1.41.2. Fix1.42. [v0.5-beta] - 2019-3-101.42.1. Update1.42.2. Fix1.43. [v0.4.1-beta] - 2019-3-61.43.1. Update1.44. [v0.4-beta] - 2019-3-51.44.1. New Features1.45. [v0.3-beta] - 2019-2-131.45.1. New Features1.46. [v0.2-beta] - 2019-1-311.46.1. Optimizer1.47. [v0.1-beta] - 2019-1-251. goInception 更新日志 1.1. [v1.2.4] - 2020-12-19 1.1.1. Fix 修复MariaDB可能出现dml未备份成功的问题 修复update指定表别名时审核错误的问题 (#249) 修复select列中子查询可能找不到父表列和having子句可能找不到列的问题 (#266) 修复未按正确格式调用时误报error的问题 修复inception set语法指定float类型参数会报错的问题 (#279) 修复未正确解析备份语句时的状态标计 (#286) 1.1.2. New Features 添加lock_wait_timeout,控制普通SQL 执行时的锁等待超时时间 (#224) 增加 pt-osc 的 sleep 参数,以优化低配 db 执行 ddl 变更时的负载情况 (#260) 添加视图支持 (#238,#262) 添加参数ignore_osc_alter_stmt配置强制忽略osc检查的语法 (#258,#263) 添加CREATE TABLE AS SELECT语法支持 (#246,#264) 添加tidb列属性auto_random支持 (#270) 增加 inc 执行时设置 sql_mode 选项 (#267) insert时添加非法日期审核 (#277) 1.1.3. Update 优化索引可见性审核对于多版本数据库的支持 (#247) 优化备份功能的binlog解析 (#250) 完善MySQL8.0关键字列表 (#210) 优化默认数据库的配置,指定--db选项后可省略use操作 优化osc进程处理逻辑,添加并发锁处理 完善alter table表分区语法 (#281) 优化当开启ssl时的备份功能处理 (#287) 1.2. [v1.2.3] - 2020-05-22 1.2.1. Fix fix: 修复pt-osc在获取表锁卡住时无法kill的问题 (#213, #222) 1.2.2. New Features 添加参数ignore_sighup,默认忽略终端连接断开信号 (#195) 添加osc_lock_wait_timeout参数, 控制pt-osc等待meta lock时间，默认60s (#214, #215) 支持多个自定义索引前缀 (#204) 1.2.3. Update 完善MySQL5.7关键字列表 (#210) 1.3. [v1.2.2] - 2020-04-04 1.3.1. Fix 修复max_char_length未指定时误审核的问题 修复索引列长度限制不准确的问题 (#176) 修复inception set命令返回错误的问题,修复lang设置可能不生效的问题 修复在开启事务时,DDL和DML混合执行时可能出错的问题 (#182) 1.3.2. New Features 添加会话级变量设置 (#157, #166, #167) 添加osc参数osc_max_flow_ctl,以便PXC集群启用pt-osc功能 (#170, #172) 添加审核项columns_must_have_index, 指定列必须添加索引 (#174, #175) 1.3.3. Update 优化列的字符集和排序规则审核逻辑 (#173) 添加where条件中的值表达式审核,避免无效表达式误更新 (#178) 优化鉴权失败时打印部分须特权执行的内部SQL,以便问题快速定位 1.4. [v1.2.1] - 2020-03-07 1.4.1. Fix 优化使用pt工具时ALTER语句前后的注释可能导致其解析失败的问题 1.4.2. New Features 系统变量中添加版本号信息 show variables like 'version' (#164) 1.4.3. Update 在开启获取真实受影响行数参数时,忽略sql指纹功能(准确性优先) 自动移除每行SQL行首行尾的特殊空格(ASCII码160) 优化bit类型默认值审核,现已支持如b'1'的审核 优化未正确配置数据源时的错误提示,使之更友好 缓存建表时唯一键的设置 完善数值类型的显示宽度审核 (#162) 1.5. [v1.2.0] - 2020-01-18 1.5.1. Fix 修复change column修改列名并立即引用旧列名时未正确审核的bug (#150) 修复使用year类型错误长度时未正确审核的问题 修复join语法ON子句审核逻辑不正确的问题 1.5.2. New Features 表名和索引名前缀自定义 (#149) 表名前缀 table_prefix, 默认为空,即不限制 索引前缀 index_prefix ,默认为idx_,和之前版本保持一致,可自定义 唯一索引前缀 uniq_index_prefix ,默认为uniq_,和之前版本保持一致,可自定义 1.5.3. Update 优化使用pt工具时的alter子句解析 优化gh-ost和备份功能的日志输出,调整为统一格式 优化默认数据库的参数设置,由默认mysql库调整为默认为空,以避免特殊情况下影响主从同步 1.6. [v1.1.6] - 2020-01-02 1.6.1. Fix 修复timestamp类型开关审核不正确的问题 修复实例未开启autocommit时DML操作未正确提交的bug (#146) 1.6.2. New Features 添加用户鉴权模块,实现用户管理,安全连接功能 (#132) 添加事务支持(批量执行) (#135) 1.6.3. Update 优化列类型变更审核 (#121) 实现update set多表时的回滚支持 (#112,#136) 优化区分大小写时的审核规则 (#123) 优化使用pt-osc工具时的alter子句拆分逻辑 (#142) 1.7. [v1.1.5] - 2019-12-09 1.7.1. Update 优化对象名大小写审核逻辑 优化索引长度审核准确性 支持update多表更新语法(暂不支持多表回滚) (#112) 优化sql语法解析失败时的错误信息 1.8. [v1.1.4] - 2019-11-21 1.8.1. Fix 修复非空字段insert时对自增列的处理 (#113) 修复alter table rename语句的回滚SQL生成错误问题 修复在开启real_row_count选项时,DML转select count时未处理limit的问题 (#119) 1.8.2. New Features 添加新参数 hex_blob ,以支持回滚时解析二进制类型 (#118) 1.9. [v1.1.3] - 2019-11-13 1.9.1. Fix 修复表内有text,json等[]byte类型字段时最小化生成回滚语句panic的问题 (#105,#107) 修复decimal类型逆向解析时变为科学计数法形式的问题 (#106,#108) 修复多线程高并发测试时解析调用参数出现线程安全问题的bug (#103) 1.9.2. New Features 添加审核选项 check_implicit_type_conversion ,审核where条件中的隐式类型转换 (#101) 1.9.3. Update 添加TiDB数据库判断(不支持tidb备份) 添加未指定表前缀时的字段歧义审核 1.10. [v1.1.2] - 2019-10-30 1.10.1. Fix 修复线程号超出uint32范围时无法备份的问题 1.10.2. New Features 添加设置参数 enable_minimal_rollback, 用以开启最小化回滚SQL设置 (#90) 添加设置参数 wait_timeout, 用以设置远端数据库等待超时时间,默认为0,即保持数据库设置 添加mysql安全连接参数设置 --ssl等, 可配置SSL或CA证书验证 (#92) 1.11. [v1.1.1] - 2019-10-13 1.11.1. Fix 修复TiDB数据库explain出错的问题 (#86) 修复insert select语法在有删除列时列数校验可能不准确的问题 1.11.2. New Features 添加审核选项 explain_rule ,用以设置explain获取受影响行数方式 1.11.3. Update 完善spatial index审核规则 调整update语法均进行逻辑审核 添加join语法的ON子句审核 优化delete审核规则,有新表时跳过explain审核 远程数据库无法连接时,优化返回结果,添加sql内容返回 1.12. [v1.1.0] - 2019-9-7 1.12.1. Fix 修复add column操作未命中merge_alter_table检测的问题 (#79) 1.12.2. New Features 添加空间类型语法解析,添加空间索引支持 添加新的调用选项--db,用以设置默认连接的数据库,默认值为mysql 1.12.3. Update 支持建库时同时创建表等操作 (#77) 优化DDL回滚细节,对alter table多条子句调整回滚SQL为逆向 (#76) 在执行前添加数据库只读状态判断 优化索引总长度审核,现在基于目标库innodb_large_prefix参数判断 审核select语法中的星号列 优化多语句拆分解析逻辑,优化分号末尾但未结束的SQL解析 完善列定义中的索引校验 1.13. [v1.0.5] - 2019-8-20 1.13.1. Fix 修复insert values子句不支持default语法的问题 1.13.2. New Features 添加参数default_charset 用以设置连接数据库的默认字符集,默认值utf8mb4 (解决低版本不支持utf8mb4的问题) 添加pt-osc参数osc_check_unique_key_change, 设置pt-osc是否检查唯一索引,默认为true 1.13.3. Update 优化回滚功能,添加binlog_row_image设置检查,为minimal时自动修改会话级别为full 1.14. [v1.0.4] - 2019-8-5 1.14.1. New Features 添加set names语法支持 (#69) 1.14.2. Update 优化主键索引审核信息 (#67) 完善update set多字段审核规则,为set多列and语法添加警告 优化gh-ost socket文件名生成规则,避免长度溢出导致创建失败 完善外键审核规则 (#68,#70) 1.15. [v1.0.3] - 2019-7-29 1.15.1. Fix [gh-ost] 修复gh-ost在异常时没有断开binlog dump连接的问题 [gh-ost] 修复gh-ost当添加datetime列且默认值current_timestamp时,增量数据因时区导致数据错误的问题(timestamp列是正常的) 1.15.2. New Features 添加参数 enable_change_column ,设置是否支持change column语法 添加调用选项 real_row_count,设置是否通过count(*)获取真正受影响行数.默认值false 1.15.3. Update 添加pt-osc执行change column的审核,禁止多条change column操作,以免数据丢失 (pt-osc bug) 1.16. [v1.0.2] - 2019-7-26 1.16.1. Fix 修复 alter table 命令没有其他选项时能正常通过的bug (#59) 修复跨库操作时可能出现备份记录写错备份库的问题 1.16.2. New Features 添加参数 max_ddl_affect_rows，设置DDL允许的最大受影响行数，默认为0，即不限制 添加参数 check_float_double ，为 true 时，警告将 float/double 转成 decimal 数据类型。 默认为 false (#62) 添加参数 check_identifier_upper ，限制表名、列名、索引名等必须为大写，默认为false (#63) 1.16.3. Update 优化自定义审核级别实现，移除参数 enable_level，现在自定义审核级别和审核开关设置合并 (#52) 升级parser语法解析包，优化列排序规则和分区表语法支持 (#50) 优化gh-ost的server_id设置自动变化，避免同一实例重复 1.17. [v1.0.1] - 2019-7-20 1.17.1. Fix 修复 must_have_columns 参数列类型的大小写兼容问题 1.17.2. New Features 添加 alter table rename index 语法支持 添加参数 enable_zero_date，设置是否支持时间为0值，关闭时强制报错。默认值为 true (#55) 添加参数 enable_timestamp_type ，设置是否允许 timestamp 类型字段 (#57) 添加 mysql 5.5 版本审核支持 (#54) 1.17.3. Update 优化modify column列信息逻辑保存 优化列属性的键定义逻辑保存 1.18. [v1.0] - 2019-7-15 1.18.1. Fix 修复密码中包含特殊字符时pt-osc执行出错的问题 1.18.2. New Features 添加审核结果级别自定义功能 (#52) 1.18.3. Update 添加delete/update自连接审核支持 (#51) 优化binlog回滚时指定的server_id自动变化,避免同一实例重复 1.19. [v1.0-rc4] - 2019-7-9 1.19.1. Fix 修复pt-osc可能出现执行成功时但进度不到100%的问题 (#48) 1.19.2. New Features 增加enable_set_engine、support_engine参数，控制是否允许指定存储引擎以及支持的存储引擎类型 (#47) 1.19.3. Update 优化osc的进程列表,同一会话的osc进程信息延后清除(在会话执行返回后) (#48) 优化备份库库名生成逻辑,库名过长时自动截断 (#49) 优化delete和update别名审核 (#51) 1.20. [v1.0-rc3] - 2019-7-2 1.20.1. Fix 修复使用osc做DDL变更时可能不支持的问题(如alter table t engine='innodb') 1.20.2. New Features 添加sleep执行等待功能,降低对线上数据库的影响 (#46) 调用选项 sleep ,执行 sleep_rows 条SQL后休眠多少毫秒,以降低对线上数据库的影响 调用选项 sleep_rows ,执行多少条SQL后休眠一次 添加参数 max_allowed_packet 以支持更长的SQL文本 添加参数 skip_sqls 以兼容不同客户端的默认sql 1.20.3. Update 调整备份记录表sql_statement字段类型为mediumtext,并自动兼容旧版本的text类型 兼容mysqlclient客户端 1.21. [v1.0-rc2] - 2019-6-21 1.21.1. Fix 优化回滚相关表结构,字符集调整为utf8mb4 (历史表结构需要手动调整) 1.21.2. Update 优化审核规则,审核子查询、函数等各种表达式 (#44) 优化gh-ost默认生成的socket文件名格式 优化日志输出,添加线程号显示 binlog解析时添加mariadb判断 1.22. [v1.0-rc1] - 2019-6-12 1.22.1. New Features 添加split分隔功能 (#42) 1.23. [v0.9-beta] - 2019-6-4 1.23.1. New Features 添加统计功能,可通过参数 enable_sql_statistic 启用 (#38) 添加参数 check_column_position_change ,可控制是否检查列位置/顺序变更 (#40, #41) 1.23.2. Update 优化使用阿里云RDS和gh-ost时的逻辑,自动设置 assume-master-host 参数 (#39) 1.24. [v0.8.3-beta] - 2019-5-30 1.24.1. Fix 修复gh-ost的initially-drop-old-table和initially-drop-ghost-table参数支持 修复设置osc_min_table_size大于0后无法正常启用osc的bug 1.24.2. Update 兼容语法inception get processlist docker镜像内置pt-osc包(版本3.0.13) 1.25. [v0.8.2-beta] - 2019-5-27 1.25.1. Fix fix: 修复binlog解析时对unsigned列溢出值的处理 fix: 修复gh-ost执行语句有反引号时报语法错误的bug (#33) fix: 修复kill DDL操作时,返回执行和备份成功的bug,现在会提示执行结果未知了 (#34) 1.26. [v0.8.1-beta] - 2019-5-24 1.26.1. Fix 修复新建表后,使用大小写不一致的表名时返回表不存在bug 1.26.2. New Features 添加general_log参数,用以记录全量日志 1.26.3. Update 优化insert select新表的审核规则,现在select新表时也可以审核了 1.27. [v0.8-beta] - 2019-5-22 1.27.1. Fix 修复当开启sql指纹功能时,可能出现把警告误标记为错误的bug 1.27.2. Update 优化子查询审核规则,递归审核所有子查询 审核group by语法和聚合函数 1.28. [v0.7.5-beta] - 2019-5-17 1.28.1. Fix 修复执行阶段kill逻辑,避免kill后备份也中止 1.28.2. New Features 添加select语法支持 添加alter table的ALGORITHM,LOCK,FORCE语法支持 1.28.3. Update 优化update子查询审核 1.29. [v0.7.4-beta] - 2019-5-12 1.29.1. New Features 添加alter table表选项语法支持 (#30) 重新设计kill操作支持,支持远端数据库kill和goInception kill命令 (#10) 1.30. [v0.7.3-beta] - 2019-5-10 1.30.1. Fix 修复在开启备份时,执行错误时偶尔出现的误标记执行/备份成功bug 1.30.2. New Features 添加check_column_type_change参数，设置是否开启字段类型变更审核,默认开启 (#27) 1.30.3. Update 实现insert select * 列数审核 1.31. [v0.7.2-beta] - 2019-5-7 1.31.1. New Features 添加enable_json_type参数，设置是否允许json类型字段 (#26) 1.31.2. Update 实现基于系统变量explicit_defaults_for_timestamp的审核规则 优化osc解析,转义密码和alter语句中的特殊字符 1.32. [v0.7.1-beta] - 2019-5-4 1.32.1. Update 优化json类型字段处理逻辑，不再检查其默认值和NOT NULL约束 (#7, #22) 优化must_have_columns参数值解析 优化insert select审核逻辑 1.32.2. Fix 修复和完善add column(...)语法支持 修复开启osc时,alter语句有多余空格时执行失败的bug 1.32.3. New Features 添加enable_null_index_name参数，允许不指定索引名 (#25) 添加语法树打印功能(beta) (#21) 1.33. [v0.7-beta] - 2019-4-26 1.33.1. Update 优化update关联新建表时的审核，现在update时可以关联新建表了 优化insert 新建 select语法审核，现在可以获取预估受影响行数了 审核阶段自动忽略警告，优化审核逻辑 优化check_column_default_value的审核逻辑，默认值审核时会跳过主键 备份阶段sql过长时会自动截断(比如insert values很多行)，返回警告但不影响执行和备份操作 1.33.2. Fix 修复开启enable_pk_columns_only_int选项时列类型审核错误的问题 1.33.3. New Features 添加enable_set_collation参数，设置是否允许指定表和数据库的排序规则 添加support_collation参数，设置支持的排序规则,多个时以逗号分隔 1.34. [v0.6.4-beta] - 2019-4-23 1.34.1. Fix 修复mysql 5.6和mariadb无法获取受影响行数的问题 1.35. [v0.6.3-beta] - 2019-4-22 1.35.1. New Features 添加max_insert_rows参数，设置insert values允许的最大行数。 添加must_have_columns参数，用以指定建表时必须创建的列。多个列时以逗号分隔(格式: 列名 [列类型,可选]) 1.36. [v0.6.2-beta] - 2019-4-18 1.36.1. Update 添加不支持的语法警告(create table as和create table select) 实现alter多子句时的表结构变化支持,如drop column后跟add column 1.36.2. Fix 修复explain返回null列时报错的问题 修复索引的唯一标识设置错误问题 1.37. [v0.6.1-beta] - 2019-4-9 1.37.1. Update 添加远端数据库断开重连机制，优化线程号和master status查询速度 优化远端数据库访问操作 优化sql内容解析，移除多余分号和空格 1.37.2. Fix 修复跨库update时无法找到列的问题 修复osc子句有双引号时执行错误的问题 1.37.3. New Features 添加sql指纹功能 dml语句相似时，可以根据相同的指纹ID复用explain结果，以减少远端数据库explain操作，并提高审核速度 可以通过inception set enable_fingerprint=1;或配置文件开启全局配置 也可以通过调用选项--fingerprint=1;开启单个配置 两种配置取并集，即开启任一配置，则启用sql指纹功能，默认关闭。 1.38. [v0.6-beta] - 2019-4-3 1.38.1. Update 备份操作性能优化,备份信息改为批量写入 添加备份库连接超时检查 explain函数性能优化 优化部分函数未指定架构名时的默认处理 优化默认值检查,添加计算列支持 (#12, #13, #14) 优化时间格式和范围检查,根据数据库sql_mode校验零值日期 升级到go 1.12 1.38.2. Fix 修复index name校验逻辑,其可与列名一致 修复timestamp默认值校验不准确的问题 1.38.3. New Features 添加kill功能支持,在审核和执行时可以kill,备份阶段无法kill (#10) 添加check_timestamp_count参数,可配置是否检查current_timestamp数量 (#11, #15) 1.39. [v0.5.3-beta] - 2019-3-25 1.39.1. Update 变更列名时使用逻辑校验,避免explain update失败 添加union子句校验 添加表名别名重复性校验 1.39.2. Fix 修复update set子句指定表别名时校验问题 修复自增列校验问题 修复default value为表达式时的校验问题 1.40. [v0.5.2-beta] - 2019-3-17 1.40.1. Update 优化主键NULL列审核规则(审核DEFAULT NULL) 优化索引总长度校验,根据列字符集判断字节数长度 优化DDL备份对默认值的处理 1.41. [v0.5.1-beta] - 2019-3-14 1.41.1. Update 优化option解析规则,密码兼容特殊字符 优化语法解析失败时返回的sql语句 添加中文的异常和警告信息 添加新的参数 lang 设置返回的异常信息语言,可选值 en-US,zh-CN,默认en-US1.41.2. Fix 修复mariadb备份警告信息重复的问题 1.42. [v0.5-beta] - 2019-3-10 1.42.1. Update 兼容mariadb v10版本的备份兼容(高并发时回滚语句可能有误，须注意检查) 更新pt-osc部分参数名，使其与inception保持一致 osc_critical_running -> osc_critical_thread_running osc_critical_connected -> osc_critical_thread_connected osc_max_running -> osc_max_thread_running osc_max_connected -> osc_max_thread_connected 隐藏gh-osc部分未使用参数 添加是否允许删除数据库参数enable_drop_database 优化系统变量variables显示和设置 调整部分参数默认值 ghost_ok_to_drop_table true ghost_skip_foreign_key_checks true osc_chunk_size 10001.42.2. Fix 修复json列校验异常问题 (#7) 1.43. [v0.4.1-beta] - 2019-3-6 1.43.1. Update 兼容mariadb数据库(v5.5.60) 添加mariadb的binlog解析支持(测试版本v5.5.60,v10版本由于binlog格式改变,暂无法解析thread_id) 优化备份失败时的返回信息 1.44. [v0.4-beta] - 2019-3-5 1.44.1. New Features 添加gh-ost工具支持 无需安装gh-ost,功能内置(v1.0.48) 进程列表 inception get osc processlist 指定进程信息 inception get osc_percent 'sqlsha1' 进程终止 inception stop alter 'sqlsha1' (同义词inception kill osc 'sqlsha1') 进程暂停 inception pause alter 'sqlsha1' (同义词inception pause osc 'sqlsha1') 进程恢复 inception resume alter 'sqlsha1' (同义词inception resume osc 'sqlsha1') 兼容gh-ost参数 inception show variables like 'ghost%' 1.45. [v0.3-beta] - 2019-2-13 1.45.1. New Features 添加pt-osc工具支持 inception get osc processlist 查看osc进程列表 inception get osc_percent 'sqlsha1' 查看指定的osc进程 inception stop alter 'sqlsha1' (同义词inception kill osc 'sqlsha1')中止指定的osc进程 1.46. [v0.2-beta] - 2019-1-31 1.46.1. Optimizer 优化二进制构建方式，压缩安装包大小 移除vendor依赖，优化GO111MODULE使用方式 跳过权限校验，以避免登陆goInception失败 移除root身份启动校验，以避免windows无法启动 优化inception set变量时的类型校验 1.47. [v0.1-beta] - 2019-1-25 goInception正式发布 Copyright © 2021 hanchuanchuan, all rights reserved            Modify: 2021-02-09 12:08:38 "}}